(window.webpackJsonp=window.webpackJsonp||[]).push([[163],{734:function(a,e,t){"use strict";t.r(e);var r=t(5),s=Object(r.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"一-springboot-spring"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一-springboot-spring"}},[a._v("#")]),a._v(" 一.SpringBoot/spring")]),a._v(" "),t("h3",{attrs:{id:"springbootapplication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springbootapplication"}},[a._v("#")]),a._v(" @SpringBootApplication:")]),a._v(" "),t("p",[a._v("包含@Configuration、@EnableAutoConfiguration、@ComponentScan通常用在主类上；")]),a._v(" "),t("h3",{attrs:{id:"repository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[a._v("#")]),a._v(" @Repository:")]),a._v(" "),t("p",[a._v("用于标注数据访问组件，即DAO组件；")]),a._v(" "),t("h3",{attrs:{id:"service"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[a._v("#")]),a._v(" @Service:")]),a._v(" "),t("p",[a._v("用于标注业务层组件；")]),a._v(" "),t("h3",{attrs:{id:"restcontroller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#restcontroller"}},[a._v("#")]),a._v(" @RestController:")]),a._v(" "),t("p",[a._v("用于标注控制层组件(如struts中的action)，包含@Controller和@ResponseBody；")]),a._v(" "),t("h3",{attrs:{id:"controller"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#controller"}},[a._v("#")]),a._v(" @Controller:")]),a._v(" "),t("p",[a._v("用于标注是控制层组件，需要返回页面时请用@Controller而不是@RestController；")]),a._v(" "),t("h3",{attrs:{id:"component"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#component"}},[a._v("#")]),a._v(" @Component:")]),a._v(" "),t("p",[a._v("泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注；")]),a._v(" "),t("h3",{attrs:{id:"responsebody"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#responsebody"}},[a._v("#")]),a._v(" @ResponseBody:")]),a._v(" "),t("p",[a._v("表示该方法的返回结果直接写入HTTP response body中，一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，\n加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中；比如异步获取json数据，加上@responsebody后，会直接返回json数据；")]),a._v(" "),t("h3",{attrs:{id:"requestbody"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requestbody"}},[a._v("#")]),a._v(" @RequestBody:")]),a._v(" "),t("p",[a._v("参数前加上这个注解之后，认为该参数必填。表示接受json字符串转为对象 List等；")]),a._v(" "),t("h3",{attrs:{id:"componentscan"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#componentscan"}},[a._v("#")]),a._v(" @ComponentScan:")]),a._v(" "),t("p",[a._v("组件扫描。个人理解相当于，如果扫描到有@Component @Controller @Service等这些注解的类，则把这些类注册为bean")]),a._v(" "),t("h3",{attrs:{id:"configuration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[a._v("#")]),a._v(" @Configuration:")]),a._v(" "),t("p",[a._v("指出该类是 Bean 配置的信息源，相当于XML中的，一般加在主类上；")]),a._v(" "),t("h3",{attrs:{id:"import"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#import"}},[a._v("#")]),a._v(" @Import：")]),a._v(" "),t("p",[a._v("用来导入其他配置类。")]),a._v(" "),t("h3",{attrs:{id:"importresource"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#importresource"}},[a._v("#")]),a._v(" @ImportResource：")]),a._v(" "),t("p",[a._v("用来加载xml配置文件。")]),a._v(" "),t("h3",{attrs:{id:"bean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bean"}},[a._v("#")]),a._v(" @Bean:")]),a._v(" "),t("p",[a._v("相当于XML中的,放在方法的上面，而不是类，意思是产生一个bean,并交给spring管理；")]),a._v(" "),t("h3",{attrs:{id:"value"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#value"}},[a._v("#")]),a._v(" @Value：")]),a._v(" "),t("p",[a._v("注入Spring boot application.properties配置的属性的值。")]),a._v(" "),t("h3",{attrs:{id:"inject"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inject"}},[a._v("#")]),a._v(" @Inject：")]),a._v(" "),t("p",[a._v("等价于默认的@Autowired，只是没有required属性")]),a._v(" "),t("h3",{attrs:{id:"enableautoconfiguration"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enableautoconfiguration"}},[a._v("#")]),a._v(" @EnableAutoConfiguration:")]),a._v(" "),t("p",[a._v("让 Spring Boot 根据应用所声明的依赖来对 Spring 框架进行自动配置，一般加在主类上；")]),a._v(" "),t("h3",{attrs:{id:"autowired"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#autowired"}},[a._v("#")]),a._v(" @AutoWired:")]),a._v(" "),t("p",[a._v("byType方式。把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作；\n当加上（required=false）时，就算找不到bean也不报错；")]),a._v(" "),t("h3",{attrs:{id:"qualifier"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#qualifier"}},[a._v("#")]),a._v(" @Qualifier:")]),a._v(" "),t("p",[a._v('当有多个同一类型的Bean时，可以用@Qualifier("name")来指定。与@Autowired配合使用；')]),a._v(" "),t("h3",{attrs:{id:"resource-name-name-type-type"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resource-name-name-type-type"}},[a._v("#")]),a._v(' @Resource(name="name",type="type")：')]),a._v(" "),t("p",[a._v("没有括号内内容的话，默认byName。与@Autowired干类似的事；")]),a._v(" "),t("h3",{attrs:{id:"requestmapping"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping"}},[a._v("#")]),a._v(" @RequestMapping:")]),a._v(" "),t("p",[a._v("RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径；")]),a._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[a._v("该注解有六个属性:\nparams:指定request中必须包含某些参数值是，才让该方法处理。\nheaders:指定request中必须包含某些指定的header值，才能让该方法处理请求。\nvalue:指定请求的实际地址，指定的地址可以是URI Template 模式\nmethod:指定请求的method类型， GET、POST、PUT、DELETE等\nconsumes:指定处理请求的提交内容类型（Content-Type），如application/json,text/html;\nproduces:指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回。\n")])])]),t("h3",{attrs:{id:"getmapping、-postmapping等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#getmapping、-postmapping等"}},[a._v("#")]),a._v(" @GetMapping、@PostMapping等:")]),a._v(" "),t("p",[a._v('相当于@RequestMapping（value="/"，method=RequestMethod.GetPostPutDelete等） 。是个组合注解；')]),a._v(" "),t("h3",{attrs:{id:"requestparam"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#requestparam"}},[a._v("#")]),a._v(" @RequestParam:")]),a._v(" "),t("p",[a._v("用在方法的参数前面。相当于 request.getParameter；")]),a._v(" "),t("h3",{attrs:{id:"pathvariable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#pathvariable"}},[a._v("#")]),a._v(" @PathVariable:")]),a._v(" "),t("p",[a._v('路径变量。如 RequestMapping("user/get/mac/{macAddress}") ；')]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("getByMacAddress")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[a._v("@PathVariable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"macAddress"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" macAddress"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//do something;")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br")])]),t("p",[a._v("参数与大括号里的名字相同的话，注解后括号里的内容可以不填。")]),a._v(" "),t("h3",{attrs:{id:"jsonbackreference"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsonbackreference"}},[a._v("#")]),a._v(" @JsonBackReference")]),a._v(" "),t("p",[a._v("解决嵌套外链问题")]),a._v(" "),t("h3",{attrs:{id:"repositoryrestresourcepublic"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repositoryrestresourcepublic"}},[a._v("#")]),a._v(" @RepositoryRestResourcepublic")]),a._v(" "),t("p",[a._v("配合spring-boot-starter-data-rest使用")]),a._v(" "),t("h2",{attrs:{id:"二-jpa"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二-jpa"}},[a._v("#")]),a._v(" 二.Jpa")]),a._v(" "),t("h3",{attrs:{id:"entity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entity"}},[a._v("#")]),a._v(" @Entity:")]),a._v(" "),t("h3",{attrs:{id:"table-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#table-name"}},[a._v("#")]),a._v(' @Table(name=""):')]),a._v(" "),t("p",[a._v("表明这是一个实体类。一般用于jpa ，这两个注解一般一块使用，但是如果表名和实体类名相同的话，@Table可以省略；")]),a._v(" "),t("h3",{attrs:{id:"mappedsuperclass"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#mappedsuperclass"}},[a._v("#")]),a._v(" @MappedSuperClass:")]),a._v(" "),t("p",[a._v("用在确定是父类的entity上。父类的属性子类可以继承；")]),a._v(" "),t("h3",{attrs:{id:"norepositorybean"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#norepositorybean"}},[a._v("#")]),a._v(" @NoRepositoryBean:")]),a._v(" "),t("p",[a._v("一般用作父类的repository，有这个注解，spring不会去实例化该repository；")]),a._v(" "),t("h3",{attrs:{id:"column"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#column"}},[a._v("#")]),a._v(" @Column:")]),a._v(" "),t("p",[a._v("如果字段名与列名相同，则可以省略；")]),a._v(" "),t("h3",{attrs:{id:"id"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#id"}},[a._v("#")]),a._v(" @Id:")]),a._v(" "),t("p",[a._v("表示该属性为主键；")]),a._v(" "),t("h3",{attrs:{id:"generatedvalue-strategy-generationtype-sequence-generator-repair-seq"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generatedvalue-strategy-generationtype-sequence-generator-repair-seq"}},[a._v("#")]),a._v(' @GeneratedValue(strategy=GenerationType.SEQUENCE,generator = "repair_seq"):')]),a._v(" "),t("p",[a._v("表示主键生成策略是sequence（可以为Auto、IDENTITY、native等，Auto表示可在多个数据库间切换），指定sequence的名字是repair_seq；")]),a._v(" "),t("h3",{attrs:{id:"sequencegeneretor-name-repair-seq-sequencename-seq-repair-allocationsize-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sequencegeneretor-name-repair-seq-sequencename-seq-repair-allocationsize-1"}},[a._v("#")]),a._v(' @SequenceGeneretor(name = "repair_seq", sequenceName = "seq_repair", allocationSize = 1):')]),a._v(" "),t("p",[a._v("name为sequence的名称，以便使用，sequenceName为数据库的sequence名称，两个名称可以一致；")]),a._v(" "),t("h3",{attrs:{id:"transient"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#transient"}},[a._v("#")]),a._v(" @Transient:")]),a._v(" "),t("p",[a._v("表示该属性并非一个到数据库表的字段的映射,ORM框架将忽略该属性.\n如果一个属性并非数据库表的字段映射,就务必将其标示为@Transient,否则,ORM框架默认其注解为@Basic；")]),a._v(" "),t("h3",{attrs:{id:"basic-fetch-fetchtype-lazy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#basic-fetch-fetchtype-lazy"}},[a._v("#")]),a._v(" @Basic(fetch=FetchType.LAZY):")]),a._v(" "),t("p",[a._v("标记可以指定实体属性的加载方式；")]),a._v(" "),t("h3",{attrs:{id:"jsonignore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jsonignore"}},[a._v("#")]),a._v(" @JsonIgnore:")]),a._v(" "),t("p",[a._v("作用是json序列化时将java bean中的一些属性忽略掉,序列化和反序列化都受影响；")]),a._v(" "),t("h3",{attrs:{id:"joincolumn-name-loginid"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#joincolumn-name-loginid"}},[a._v("#")]),a._v(' @JoinColumn(name="loginId"):')]),a._v(" "),t("p",[a._v("一对一：本表中指向另一个表的外键。一对多：另一个表指向本表的外键。")]),a._v(" "),t("h3",{attrs:{id:"onetoone"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onetoone"}},[a._v("#")]),a._v(" @OneToOne")]),a._v(" "),t("p",[a._v("对应Hibernate配置文件中的一对一")]),a._v(" "),t("h3",{attrs:{id:"onetomany"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#onetomany"}},[a._v("#")]),a._v(" @OneToMany")]),a._v(" "),t("p",[a._v("对应Hibernate配置文件中的一对多")]),a._v(" "),t("h3",{attrs:{id:"manytoone"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#manytoone"}},[a._v("#")]),a._v(" @ManyToOne:")]),a._v(" "),t("p",[a._v("对应Hibernate配置文件中的多对一")]),a._v(" "),t("h2",{attrs:{id:"三-全局异常处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三-全局异常处理"}},[a._v("#")]),a._v(" 三.全局异常处理")]),a._v(" "),t("h3",{attrs:{id:"controlleradvice"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#controlleradvice"}},[a._v("#")]),a._v(" @ControllerAdvice:")]),a._v(" "),t("p",[a._v("包含@Component。可以被扫描到。统一处理异常；")]),a._v(" "),t("h3",{attrs:{id:"exceptionhandler-exception-class"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#exceptionhandler-exception-class"}},[a._v("#")]),a._v(" @ExceptionHandler(Exception.class):")]),a._v(" "),t("p",[a._v("用在方法上面表示遇到这个异常就执行以下方法。")]),a._v(" "),t("h2",{attrs:{id:"四-springcloud"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四-springcloud"}},[a._v("#")]),a._v(" 四.springcloud")]),a._v(" "),t("h3",{attrs:{id:"enableeurekaserver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enableeurekaserver"}},[a._v("#")]),a._v(" @EnableEurekaServer:")]),a._v(" "),t("p",[a._v("用在springboot启动类上，表示这是一个eureka服务注册中心；")]),a._v(" "),t("h3",{attrs:{id:"enablediscoveryclient"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enablediscoveryclient"}},[a._v("#")]),a._v(" @EnableDiscoveryClient:")]),a._v(" "),t("p",[a._v("用在springboot启动类上，表示这是一个服务，可以被注册中心找到；")]),a._v(" "),t("h3",{attrs:{id:"loadbalanced"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loadbalanced"}},[a._v("#")]),a._v(" @LoadBalanced:")]),a._v(" "),t("p",[a._v("开启负载均衡能力；")]),a._v(" "),t("h3",{attrs:{id:"enablecircuitbreaker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enablecircuitbreaker"}},[a._v("#")]),a._v(" @EnableCircuitBreaker:")]),a._v(" "),t("p",[a._v("用在启动类上，开启断路器功能；")]),a._v(" "),t("h3",{attrs:{id:"hystrixcommand-fallbackmethod-backmethod"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hystrixcommand-fallbackmethod-backmethod"}},[a._v("#")]),a._v(' @HystrixCommand(fallbackMethod="backMethod"):')]),a._v(" "),t("p",[a._v("用在方法上，fallbackMethod指定断路回调方法；")]),a._v(" "),t("h3",{attrs:{id:"enableconfigserver"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enableconfigserver"}},[a._v("#")]),a._v(" @EnableConfigServer:")]),a._v(" "),t("p",[a._v("用在启动类上，表示这是一个配置中心，开启Config Server；")]),a._v(" "),t("h3",{attrs:{id:"enablezuulproxy"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#enablezuulproxy"}},[a._v("#")]),a._v(" @EnableZuulProxy:")]),a._v(" "),t("p",[a._v("开启zuul路由，用在启动类上；")]),a._v(" "),t("h3",{attrs:{id:"springcloudapplication"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springcloudapplication"}},[a._v("#")]),a._v(" @SpringCloudApplication:")]),a._v(" "),t("p",[a._v("包含")]),a._v(" "),t("ul",[t("li",[a._v("@SpringBootApplication")]),a._v(" "),t("li",[a._v("@EnableDiscovertyClient")]),a._v(" "),t("li",[a._v("@EnableCircuitBreaker")])]),a._v(" "),t("p",[a._v("分别是SpringBoot注解、注册服务中心Eureka注解、断路器注解。对于SpringCloud来说，这是每一微服务必须应有的三个注解，所以才推出了@SpringCloudApplication这一注解集合。")])])}),[],!1,null,null,null);e.default=s.exports}}]);