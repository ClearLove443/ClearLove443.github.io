(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{588:function(t,a,p){"use strict";p.r(a);var s=p(5),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,p=t._self._c||a;return p("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[p("h2",{attrs:{id:"前后端不分离"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#前后端不分离"}},[t._v("#")]),t._v(" 前后端不分离")]),t._v(" "),p("p",[t._v("在前后端不分离的应用模式中，前端页面看到的效果都是由后端控制，由后端渲染页面或重定向，也就是后端需要控制前端的展示，前端与后端的耦合度很高。\n请求的数据交互如下图:")]),t._v(" "),p("p",[p("img",{attrs:{src:"/2799137752-3e133fdfd20827f9_fix732.png",alt:"数据交互图"}})]),t._v(" "),p("p",[t._v("这种应用模式比较适合纯网页应用，但是当后端对接App时，App可能并不需要后端返回一个HTML网页，而仅仅是数据本身，所以后端原本返回网页的接口不适用于前端App应用，为了对接App后端还需再开发一套接口。")]),t._v(" "),p("h2",{attrs:{id:"前后端分离"}},[p("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离"}},[t._v("#")]),t._v(" 前后端分离")]),t._v(" "),p("p",[t._v("在前后端分离的应用模式中，后端仅返回前端所需的数据，不再渲染HTML页面，不再控制前端的效果。至于前端用户看到什么效果，从后端请求的数据如何加载到前端中，都由前端自己决定，网页有网页的处理方式，App有App的处理方式，但无论哪种前端，所需的数据基本相同，后端仅需开发一套逻辑对外提供数据即可。")]),t._v(" "),p("p",[t._v("对应的数据交互如下图 :")]),t._v(" "),p("p",[p("img",{attrs:{src:"/2063119990-5fc70e67da45d_fix732.jfif",alt:"数据交互图"}})]),t._v(" "),p("p",[t._v("在前后端分离的应用模式中 ，前端与后端的耦合度相对较低。在前后端分离的应用模式中，我们通常将后端开发的每个视图都称为一个接口，或者API，前端通过访问接口来对数据进行增删改查。")])])}),[],!1,null,null,null);a.default=r.exports}}]);